int power(int x, int y, int p)
{
    int res = 1;
    x = x % p;
    while (y > 0)
    {
        if (y & 1)
        {
            res = (res * x) % p;
        }
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
} 

ll POW(ll a, ll b, ll mod)
{
    if (b == 0)
        return 1;
    if (b == 1)
        return a % mod;
    ll temp = POW(a, b / 2, mod);
    if (b % 2 == 0)
        return (temp * temp) % mod;
    else
        return (((temp * temp) % mod) * a) % mod;
}

//FOR NEAGTIVE BASES

int Solution::pow(int a, int b, int mod)
{
    if (b == 0)
        return 1 % mod;
    if (b == 1)
    {
        if (a < 0)
        {
            return (a + mod) % mod;
        }
        else
        {
            return a % mod;
        }
    }
    long temp = pow(a, b / 2, mod);
    if (b % 2 == 0)
        return (temp * temp) % mod;
    else
        return (((temp * temp) % mod) * a) % mod;
}

FOR NEAGTIVE BASES 

class Solution {
    double helper(double x,int n){
        if(n==0){
            return 1;
        }if(n==1){
            return x;
        }
        double temp = helper(x,n/2);
        if(n%2==0){
            return temp*temp;
        }else{
            return temp*temp*x;
        }
    }
    public double myPow(double x, int n) {
        if(n<0)
        {
            n=-n;
            return helper(x,n);
        }
        else
        {
            return helper(x,n);
        }
    }
}