#include "bits/stdc++.h"
using namespace std;
#define int long long
#define pb push_back
#define ppb pop_back
#define pf push_front
#define ppf pop_front
#define all(x) (x).begin(), (x).end()
#define uniq(v) (v).erase(unique(all(v)), (v).end())
#define sz(x) (int)((x).size())
#define fr first
#define sc second
#define pii pair<int, int>
#define rep(i, a, b) for (int i = a; i < b; i++)
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define ppc __builtin_popcount
#define ppcll __builtin_popcountll


const long long INF = 1e18;
const int32_t M = 1e9 + 7;
const int32_t MM = 998244353;

const int N = 0;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int n, m;
vector<vector<int>> vis;
bool check(int x, int y)
{
    if (x < 0 || y < 0 || x >= n || y >= m || vis[x][y])
    {
        return false;
    }
    return true;
}
//for checking whether a corrdinate is perfect or not
int dfs(int x, int y)
{
    vis[x][y] = 1;
    int ans = 1;
    for (int i = 0; i < 4; i++)
    {
        int X = x + dx[i];
        int Y = y + dy[i];
        if (!check(X, Y))
        {
            continue;
        }
        ans += dfs(X, Y);
    }
    return ans;
}
// used to operate dfs
void solve()
{
    cin >> n >> m;
    vis.clear();
    vis.resize(n, vector<int>(m)); // n*m
    for (int i = 0; i < n; i++)
    {
        string s;
        cin >> s;
        for (int j = 0; j < m; j++)
        {
            if (s[j] == '0')
            {
                vis[i][j] = 1;
            }
        }
    }

    vector<int> sizes;

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (check(i, j))
            {
                sizes.push_back(dfs(i, j));
            }
        }
    }
    //question dependednt
    sort(all(sizes), greater<int>());
    int ans = 0;
    for (int i = 0; i < sz(sizes); i++)
    {
        if (i % 2 == 1)
        {
            ans += sizes[i];
        }
    }
    cout << ans << "\n";
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int t = 1;
    cin >> t;
    while (t--)
        solve();
    return 0;
}
